// <auto-generated />
using System;
using System.Collections.Generic;
using ExMart_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExMart_Backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExMart_Backend.Model.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressTypeName = "Home"
                        },
                        new
                        {
                            Id = 2,
                            AddressTypeName = "Office"
                        },
                        new
                        {
                            Id = 3,
                            AddressTypeName = "Other"
                        });
                });

            modelBuilder.Entity("ExMart_Backend.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("addToCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Garments",
                            IconPath = "icons/garments.png"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Stationary",
                            IconPath = "icons/stationary.png"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Appliances",
                            IconPath = "icons/appliance.png"
                        });
                });

            modelBuilder.Entity("ExMart_Backend.Model.ColourMaster", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ColorId");

                    b.ToTable("ColourMaster");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            ColorCode = "#FF0000",
                            ColorName = "red"
                        },
                        new
                        {
                            ColorId = 2,
                            ColorCode = "#0000FF",
                            ColorName = "blue"
                        },
                        new
                        {
                            ColorId = 3,
                            ColorCode = "#FFFFFF",
                            ColorName = "white"
                        },
                        new
                        {
                            ColorId = 4,
                            ColorCode = "#000000",
                            ColorName = "black"
                        },
                        new
                        {
                            ColorId = 5,
                            ColorCode = "#008000",
                            ColorName = "green"
                        },
                        new
                        {
                            ColorId = 6,
                            ColorCode = "#8F00FF",
                            ColorName = "violet"
                        },
                        new
                        {
                            ColorId = 7,
                            ColorCode = "#FFFF00",
                            ColorName = "yellow"
                        });
                });

            modelBuilder.Entity("ExMart_Backend.Model.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Product_StatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("Product_StatusId");

                    b.HasIndex("UserAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ExMart_Backend.Model.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("OrderItemId");

                    b.HasIndex("ColorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ExMart_Backend.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("ColorId")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("PrimaryImageUrl")
                        .HasColumnType("text");

                    b.Property<List<int>>("SizeId")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Experion",
                            CategoryId = 1,
                            ColorId = new List<int> { 4, 3, 2 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Experion branded t-shirt",
                            IsActive = true,
                            Name = "Experion Tshirt",
                            Price = 1499.00m,
                            PrimaryImageUrl = "staticimages/pro_tshirt.png",
                            SizeId = new List<int> { 1, 2, 3, 4, 5 },
                            UpdatedAt = new DateTime(2023, 11, 23, 15, 22, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 500m
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Experion",
                            CategoryId = 1,
                            ColorId = new List<int> { 4, 3 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Experion branded hoodie",
                            IsActive = true,
                            Name = "Hoody Experion brand",
                            Price = 399.99m,
                            PrimaryImageUrl = "https://media.karousell.com/media/photos/products/2023/4/29/gildan_zipup_hoodie_1682750904_29598b39.jpg",
                            SizeId = new List<int> { 1, 2, 3, 4, 5, 6 },
                            UpdatedAt = new DateTime(2023, 11, 23, 15, 22, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 600m
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Experion",
                            CategoryId = 1,
                            ColorId = new List<int> { 4, 3, 1, 2 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Experion branded jersey",
                            IsActive = true,
                            Name = "Jersey Experion branded",
                            Price = 399.99m,
                            PrimaryImageUrl = "https://m.media-amazon.com/images/I/51C2ieRiU9L.jpg",
                            SizeId = new List<int> { 1, 2, 3, 4, 5, 6 },
                            UpdatedAt = new DateTime(2023, 11, 23, 15, 22, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 400m
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Swiss Military",
                            CategoryId = 3,
                            ColorId = new List<int> { 1, 6 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Swiss military branded earpods",
                            IsActive = true,
                            Name = "Earpods Swiss military",
                            Price = 349.99m,
                            PrimaryImageUrl = "https://m.media-amazon.com/images/I/71RFdy6y6LL._SL1500_.jpg",
                            SizeId = new List<int> { 8 },
                            UpdatedAt = new DateTime(2023, 11, 23, 15, 22, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 50m
                        },
                        new
                        {
                            Id = 5,
                            Brand = "VAFS",
                            CategoryId = 2,
                            ColorId = new List<int> { 3, 4 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Reusable water bottle",
                            IsActive = true,
                            Name = "Water Bottle",
                            Price = 399.00m,
                            PrimaryImageUrl = "https://m.media-amazon.com/images/I/71zFvtVuP1L._SL1500_.jpg",
                            SizeId = new List<int> { 8 },
                            UpdatedAt = new DateTime(2023, 11, 23, 15, 22, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 300m
                        },
                        new
                        {
                            Id = 6,
                            Brand = "VAFS",
                            CategoryId = 2,
                            ColorId = new List<int> { 3, 4 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Insulated flask",
                            IsActive = true,
                            Name = "Flask",
                            Price = 349.99m,
                            PrimaryImageUrl = "https://m.media-amazon.com/images/I/41W9B1Ri4hL.jpg",
                            SizeId = new List<int> { 8 },
                            UpdatedAt = new DateTime(2023, 11, 23, 15, 22, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 400m
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Samsung",
                            CategoryId = 3,
                            ColorId = new List<int> { 3, 4 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Samsung wireless earbuds",
                            IsActive = true,
                            Name = "Samsung Galaxy Buds 2 Pro",
                            Price = 1999.99m,
                            PrimaryImageUrl = "https://m.media-amazon.com/images/I/61KVX-MbIUL._SL1500_.jpg",
                            SizeId = new List<int> { 8 },
                            UpdatedAt = new DateTime(2023, 11, 23, 15, 22, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 50m
                        },
                        new
                        {
                            Id = 9,
                            Brand = "VAFS",
                            CategoryId = 2,
                            ColorId = new List<int> { 3, 4 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Personal diary",
                            IsActive = true,
                            Name = "Diary",
                            Price = 149.99m,
                            PrimaryImageUrl = "https://m.media-amazon.com/images/I/61eYApdaTDL._SL1100_.jpg",
                            SizeId = new List<int> { 8 },
                            UpdatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 200m
                        },
                        new
                        {
                            Id = 10,
                            Brand = "WildCraft",
                            CategoryId = 2,
                            ColorId = new List<int> { 3, 4 },
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Multi-purpose backpack",
                            IsActive = true,
                            Name = "BackPack",
                            Price = 149.99m,
                            PrimaryImageUrl = "staticimages/pro_bag.png",
                            SizeId = new List<int> { 8 },
                            UpdatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            VendorId = 1,
                            Weight = 700m
                        });
                });

            modelBuilder.Entity("ExMart_Backend.Model.ProductImages", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageUrl = " https://assets.ajio.com/medias/sys_master/root/20240202/XzVa/65bd163a8cdf1e0df5e313a0/-1117Wx1400H-442273276-black-MODEL7.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 11,
                            ImageUrl = "https://assets.ajio.com/medias/sys_master/root/20240202/T3LR/65bd18b616fd2c6e6ad4ea90/-473Wx593H-442273276-black-MODEL2.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 12,
                            ImageUrl = "https://assets.ajio.com/medias/sys_master/root/20240202/0iIg/65bd0e568cdf1e0df5e2e7f1/-473Wx593H-442273276-black-MODEL6.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 2,
                            ImageUrl = " https://m.media-amazon.com/images/I/51XQKBTbJ7L._SX569_.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            ImageId = 13,
                            ImageUrl = " https://m.media-amazon.com/images/I/51U6dpsRaFL._SX569_.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            ImageId = 14,
                            ImageUrl = " https://m.media-amazon.com/images/I/51Nd4BLQelL._SX569_.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            ImageId = 3,
                            ImageUrl = "https://m.media-amazon.com/images/I/915Qebmr9XL._SX679_.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            ImageId = 15,
                            ImageUrl = "https://m.media-amazon.com/images/I/915Qebmr9XL._SX679_.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            ImageId = 16,
                            ImageUrl = "https://m.media-amazon.com/images/I/91RWzNCIEhL._SX679_.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            ImageId = 4,
                            ImageUrl = "https://m.media-amazon.com/images/I/61F5lcvJHLL._SX522_.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            ImageId = 17,
                            ImageUrl = "https://m.media-amazon.com/images/I/61vBE3t4x1L._SX522_.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            ImageId = 18,
                            ImageUrl = "https://m.media-amazon.com/images/I/71QZbcvD65L._SX522_.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            ImageId = 5,
                            ImageUrl = "https://m.media-amazon.com/images/I/51caXIXHv0L._SX679_.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            ImageId = 19,
                            ImageUrl = "https://m.media-amazon.com/images/I/614uQNgsIbL._SX679_.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            ImageId = 20,
                            ImageUrl = "https://m.media-amazon.com/images/I/616+eQhVmFL._SX679_.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            ImageId = 6,
                            ImageUrl = "https://m.media-amazon.com/images/I/51zrU3wXApL._SX679_.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            ImageId = 21,
                            ImageUrl = "https://m.media-amazon.com/images/I/61h02o8qvAL._SX679_.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            ImageId = 22,
                            ImageUrl = "https://m.media-amazon.com/images/I/71kg31YtFHL._SX679_.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            ImageId = 8,
                            ImageUrl = "https://m.media-amazon.com/images/I/61lEskbCaoL._SY450_.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            ImageId = 25,
                            ImageUrl = "https://m.media-amazon.com/images/I/51wp23mi8qL._SY450_.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            ImageId = 26,
                            ImageUrl = "https://m.media-amazon.com/images/I/71YCCEPBguL._SY450_.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            ImageId = 9,
                            ImageUrl = "https://m.media-amazon.com/images/I/516HwL0zZhL._SY450_.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            ImageId = 27,
                            ImageUrl = "https://m.media-amazon.com/images/I/6190STfffwL._SY450_.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            ImageId = 28,
                            ImageUrl = "https://m.media-amazon.com/images/I/61Lo553SSIL._SY450_.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            ImageId = 10,
                            ImageUrl = "https://example.com/gproxsuperlight_1.jpg",
                            ProductId = 10
                        },
                        new
                        {
                            ImageId = 29,
                            ImageUrl = "https://example.com/gproxsuperlight_1.jpg",
                            ProductId = 10
                        },
                        new
                        {
                            ImageId = 30,
                            ImageUrl = "https://example.com/gproxsuperlight_2.jpg",
                            ProductId = 10
                        });
                });

            modelBuilder.Entity("ExMart_Backend.Model.SizeMaster", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SizeId"));

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SizeId");

                    b.ToTable("SizeMaster");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            Size = "XS"
                        },
                        new
                        {
                            SizeId = 2,
                            Size = "S"
                        },
                        new
                        {
                            SizeId = 3,
                            Size = "M"
                        },
                        new
                        {
                            SizeId = 4,
                            Size = "L"
                        },
                        new
                        {
                            SizeId = 5,
                            Size = "XL"
                        },
                        new
                        {
                            SizeId = 6,
                            Size = "XXL"
                        },
                        new
                        {
                            SizeId = 7,
                            Size = "XXXL"
                        },
                        new
                        {
                            SizeId = 8,
                            Size = "Free Size"
                        });
                });

            modelBuilder.Entity("ExMart_Backend.Model.StatusMaster", b =>
                {
                    b.Property<int>("Product_StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Product_StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Product_StatusId");

                    b.ToTable("StatusMaster");

                    b.HasData(
                        new
                        {
                            Product_StatusId = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            Product_StatusId = 2,
                            StatusName = "Shipped"
                        },
                        new
                        {
                            Product_StatusId = 3,
                            StatusName = "Delivered"
                        });
                });

            modelBuilder.Entity("ExMart_Backend.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            Email = "robert.brown@example.com",
                            Name = "Robert Brown",
                            Phone = "+91 9998887766"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 22, 13, 37, 0, 0, DateTimeKind.Utc),
                            Email = "emily.white@example.com",
                            Name = "Emily White",
                            Phone = "+91 9876543210"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 2, 7, 40, 25, 966, DateTimeKind.Utc).AddTicks(6799),
                            Email = "alicebrown@example.com",
                            Name = "Alice Brown",
                            Phone = "1122334455"
                        });
                });

            modelBuilder.Entity("ExMart_Backend.Model.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("UserAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine = "Gayathri Building",
                            AddressTypeId = 2,
                            City = "Kazhakuttam",
                            IsPrimary = true,
                            State = "Kerala",
                            UserId = 1,
                            ZipCode = "683102"
                        },
                        new
                        {
                            Id = 2,
                            AddressLine = "Athulya Building",
                            AddressTypeId = 2,
                            City = "Kakkanad",
                            IsPrimary = false,
                            State = "Kerala",
                            UserId = 1,
                            ZipCode = "682018"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExMart_Backend.Model.Order", b =>
                {
                    b.HasOne("ExMart_Backend.Model.StatusMaster", "ProductStatus")
                        .WithMany("Orders")
                        .HasForeignKey("Product_StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExMart_Backend.Model.UserAddress", "UserAddress")
                        .WithMany()
                        .HasForeignKey("UserAddressId");

                    b.HasOne("ExMart_Backend.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductStatus");

                    b.Navigation("User");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("ExMart_Backend.Model.OrderItem", b =>
                {
                    b.HasOne("ExMart_Backend.Model.ColourMaster", "Color")
                        .WithMany("OrderItems")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExMart_Backend.Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExMart_Backend.Model.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExMart_Backend.Model.SizeMaster", "Size")
                        .WithMany("OrderItems")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ExMart_Backend.Model.ProductImages", b =>
                {
                    b.HasOne("ExMart_Backend.Model.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ExMart_Backend.Model.UserAddress", b =>
                {
                    b.HasOne("ExMart_Backend.Model.AddressType", "AddressType")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExMart_Backend.Model.AddressType", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("ExMart_Backend.Model.ColourMaster", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ExMart_Backend.Model.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ExMart_Backend.Model.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ExMart_Backend.Model.SizeMaster", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ExMart_Backend.Model.StatusMaster", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ExMart_Backend.Model.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
